/**
 * This class can be extended to support the use of different hash functions.
 */
export default abstract class Hasher<H> {
  /**
   * Number of hash bits used to determine register index. This should be
   * `log2(r)` where `r` is the number of registers.
   **/
  readonly mBits: number

  constructor(mBits: number) {
    this.mBits = mBits
  }

  /**
   * Generate hash of the provided string.
   */
  abstract hash(val: string): H

  /**
   * Returns the number of consecutive zeros in the provided hash value.
   * @param hashVal The hash value as computed by the `hash(..)` method.
   */
  abstract runLength(hashVal: H): number

  /**
   * Determine the register index for a given hash value.
   * @param hashVal The hash value as computed by the `hash(..)` method.
   */
  abstract mIdx(hashVal: H): number

  /**
   * Returns the length, in bits, of hash values generated by this `Hasher`.
   */
  abstract hashLen(): number
}